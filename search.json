[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 profrep authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/profrep.html","id":"using-profrep","dir":"Articles","previous_headings":"","what":"Using profrep","title":"profrep","text":"vignette documents common use cases patterns profrep package.","code":""},{"path":"/articles/profrep.html","id":"introduction","dir":"Articles","previous_headings":"Using profrep","what":"Introduction","title":"profrep","text":"use profrep, start lab work! described home page, one common measurements stress physiologists take blood samples corticosterone quantification stress response.","code":""},{"path":"/articles/profrep.html","id":"basic-use-from-a-csv","dir":"Articles","previous_headings":"Using profrep","what":"Basic Use: From a CSV","title":"profrep","text":"First, install package CRAN: Next, load data set csv. take form data <- read.csv(<path_to_csv>). Instead loading new data, vignette make use one three example data sets provided profrep. shall use synthetic data created purpose, consists 11 individuals, four replicates sampled 4 different times. load , call data profrep package: , see missing replicates individual time. clean data! Since know many trials performed, can easily perform profile repeatability calculation wanted logs displayed terminal, changed default verbosity factor FALSE TRUE verbose = True. results calculation : see individual E highest-ranking individual, profile-repeatability score 0.9925!","code":"library(profrep) synthetic_data <- profrep::synthetic_data_four_point print(synthetic_data) #>    Animal TIME     A  B  C  D #> 1       A    0  9.00 10 11 12 #> 2       A   15 12.00 20 25 30 #> 3       A   30 16.00 30 40 50 #> 4       A   45 20.00 40 55 70 #> 5       B    0  9.00 11 13 15 #> 6       B   15 27.00 30 33 36 #> 7       B   30 30.00 33 36 39 #> 8       B   45 10.00 13 16 19 #> 9       C    0  9.00 11 13 15 #> 10      C   15 22.00 28 34 40 #> 11      C   30 27.00 35 41 47 #> 12      C   45  7.00 20 32 40 #> 13      D    0 12.00 16 19 24 #> 14      D   15 50.00 54 58 62 #> 15      D   30 20.00 24 28 32 #> 16      D   45 46.00 50 54 58 #> 17      E    0 12.00 13 14 15 #> 18      E   15 34.00 36 38 40 #> 19      E   30 39.00 41 43 45 #> 20      E   45 44.00 46 48 50 #> 21      F    0  0.01 13 14 15 #> 22      F   15 23.00 36 38 40 #> 23      F   30 28.00 41 43 45 #> 24      F   45 33.00 46 48 50 #> 25      G    0  2.00 16 20 24 #> 26      G   15 40.00 54 58 62 #> 27      G   30 10.00 24 28 32 #> 28      G   45 38.00 50 54 58 #> 29      H    0  5.00 20 35 50 #> 30      H   15 25.00 38 45 56 #> 31      H   30 46.00 52 57 63 #> 32      H   45 67.00 68 69 70 #> 33      I    0  6.00 14 22 30 #> 34      I   15 16.00 24 32 40 #> 35      I   30 28.00 36 44 52 #> 36      I   45 42.00 50 58 66 #> 37      J    0  6.00 14 22 30 #> 38      J   15 16.00 24 32 40 #> 39      J   30 28.00 36 44 52 #> 40      J   45 66.00 50 58 42 #> 41      K    0  6.00 14 22 30 #> 42      K   15 24.00 40 32 16 #> 43      K   30 44.00 28 36 52 #> 44      K   45 42.00 66 58 50 pr_score_df <- profrep::profrep(df=synthetic_data, n_timepoints=4) print(pr_score_df) #>    individual n_crossings max_variance ave_variance base_score final_score rank #> 1           E           0         6.67         5.42      12.10      0.9925    1 #> 2           B           0        15.00        12.92      27.95      0.9912    2 #> 3           D           0        26.67        26.40      53.12      0.9887    3 #> 4           F           0        58.92        56.59     115.62      0.9790    4 #> 5           G           0        91.67        87.42     179.27      0.9611    5 #> 6           I           0       106.67       106.67     213.55      0.9461    6 #> 7           J           5       106.67       106.67     277.33      0.9026    7 #> 8           C           0       207.58        86.81     294.81      0.8861    8 #> 9           K          15       106.67       106.67     384.00      0.7613    9 #> 10          H           0       375.00       149.42     525.17      0.4374   10 #> 11          A           0       456.25       181.88     639.04      0.1993   11"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ursula K. Beattie. Maintainer, author, copyright holder. David Harris. Author, copyright holder. L. Michael Romero. Author, copyright holder. J. Michael Reed. Author, copyright holder. Zachary R. Weaver. Author, copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Beattie, U.K., Harris, D., Romero, L.M., Reed, J.M., Weaver, Z.R. (2023). “profrep: R Package Profile Repeatability.” doi:10.5281/zenodo.10236416, software.","code":"@Unpublished{,   title = {profrep: An R Package for Profile Repeatability},   author = {{Beattie} and {U.K.} and {Harris} and {D.} and {Romero} and {L.M.} and {Reed} and {J.M.} and {Weaver} and {Z.R.}},   year = {2023},   month = {Nov},   journal = {Zenodo},   doi = {10.5281/zenodo.10236416},   note = {software}, }"},{"path":"/index.html","id":"profrep","dir":"","previous_headings":"","what":"An R package for profile repeatability calculation","title":"An R package for profile repeatability calculation","text":"goal profrep calculate individual profile repeatability (Reed et al., 2019). One common measurements stress physiologists take blood samples corticosterone quantification stress response. typically includes sample baseline (<3 minutes stressor onset), one stress-induced samples (e.g. 30 minutes stressor onset), potentially negative feedback sample (e.g. 120 minutes stressor onset /dexamethasone injection). time series called “stress response curves” may taken multiple times one individual. researchers multiple stress response curves individual, may want quantify repeatability investigate, example, heritibility. current standard field use linear mixed-effect models (Baugh et al. 2014; Dingemanse Dochtermann, 2013), however type repeatability estimate can done populations one timepoint time. Reed et al. (2019) proposed “Profile Repeatability,” uses full stress response curve (across time) estimate repeatability individuals. ‘profrep’ R package computing profile repeatability number individuals, number timepoints, number replicate stress response curves. full explanation math behind Profile Repeatability can found Reed et al. (2019).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R package for profile repeatability calculation","text":"can install development version profrep GitHub using devtools : can install stable version profrep CRAN : Alternatively, one using use_this package, profrep can installed :","code":"# install.packages(\"devtools\") devtools::install_github(\"ubeattie/profrep\") install.packages(\"profrep\") usethis::use_package(\"profrep\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"An R package for profile repeatability calculation","text":"common use pattern profrep load data data frame active session, pass main profrep function. , load example data set provided profrep package:","code":"library(profrep)  my_data <- profrep::synthetic_data_four_point n_trials <- 4  # or however many trials/rows of data per individual exist  profrep::profrep(df=my_data, n_timepoints=n_trials) #>    individual n_crossings max_variance ave_variance base_score final_score rank #> 1           E           0         6.67         5.42      12.10      0.9925    1 #> 2           B           0        15.00        12.92      27.95      0.9912    2 #> 3           D           0        26.67        26.40      53.12      0.9887    3 #> 4           F           0        58.92        56.59     115.62      0.9790    4 #> 5           G           0        91.67        87.42     179.27      0.9611    5 #> 6           I           0       106.67       106.67     213.55      0.9461    6 #> 7           J           5       106.67       106.67     277.33      0.9026    7 #> 8           C           0       207.58        86.81     294.81      0.8861    8 #> 9           K          15       106.67       106.67     384.00      0.7613    9 #> 10          H           0       375.00       149.42     525.17      0.4374   10 #> 11          A           0       456.25       181.88     639.04      0.1993   11"},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"An R package for profile repeatability calculation","text":"MIT License","code":""},{"path":"/index.html","id":"citing-this-work","dir":"","previous_headings":"License","what":"Citing This Work","title":"An R package for profile repeatability calculation","text":"use profrep published work, ask include reference original paper describing method (Reed et al., 2019), paper introducing package (Beattie et al., prep.), package (Beattie et al. 2023).","code":""},{"path":"/index.html","id":"citations","dir":"","previous_headings":"","what":"Citations","title":"An R package for profile repeatability calculation","text":"Baugh , Oers K van, Dingemanse NJ, Hau M. Baseline stress-induced glucocorticoid concentrations repeatable covary within individual great tits (Parus major). Gen Comp Endocrinol [Internet]. 2014;208:154–63. Available : http://dx.doi.org/10.1016/j.ygcen.2014.08.014 Beattie, U.K., Harris, D.R., Reed, J.M., Weaver, Z.R., Romero, L.M. preparation Dingemanse NJ, Dochtermann NA. Quantifying individual variation behaviour: Mixed-effect modelling approaches. J Anim Ecol. 2013;82:39–54. Reed JM, Harris DR, Romero LM. Profile repeatability: new method evaluating repeatability individual hormone response profiles. Gen Comp Endocrinol. 2019;270:1–9.","code":""},{"path":"/reference/calculate_crossovers.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the Number of Crossovers — calculate_crossovers","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"Calculate Number Crossovers","code":""},{"path":"/reference/calculate_crossovers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"","code":"calculate_crossovers(individual_df, n_trials, n_replicates)"},{"path":"/reference/calculate_crossovers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"individual_df data frame containing individual dataset. n_trials total number trials dataset (number rows) n_replicates total number replicates trial (number columns - 2)","code":""},{"path":"/reference/calculate_crossovers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"number crossovers detected dataset.","code":""},{"path":"/reference/calculate_crossovers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"function calculates number crossovers dataset comparing values replicates across multiple trials. assumes missing values (NAs) interpolated using clean_data function.","code":""},{"path":[]},{"path":"/reference/calculate_crossovers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the Number of Crossovers — calculate_crossovers","text":"","code":"data <- matrix(    c(      1, 60, 1, 2, 3, 4, 5,   # No NA values      1, 90, 9, NA, 4, NA, 2,  # NA Values in row      1, 120, 3, 6, NA, NA, 9  # Consecutive NA values     ),     nrow = 3,     byrow=TRUE ) n_trials <- nrow(data) n_replicates <- ncol(data) - 2 crossovers <- calculate_crossovers(data, n_trials, n_replicates) cat(\"Number of crossovers:\", crossovers, \"\\n\") #> Number of crossovers: 14"},{"path":"/reference/clean_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Clean Data by Interpolating Missing Values — clean_data","title":"Clean Data by Interpolating Missing Values — clean_data","text":"Clean Data Interpolating Missing Values","code":""},{"path":"/reference/clean_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clean Data by Interpolating Missing Values — clean_data","text":"","code":"clean_data(data, n_trials, n_replicates)"},{"path":"/reference/clean_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clean Data by Interpolating Missing Values — clean_data","text":"data data frame containing dataset cleaned. n_trials total number rows dataset. n_replicates total number replicate columns row.","code":""},{"path":"/reference/clean_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clean Data by Interpolating Missing Values — clean_data","text":"cleaned data frame missing values interpolated.","code":""},{"path":"/reference/clean_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Clean Data by Interpolating Missing Values — clean_data","text":"function cleans dataset interpolating missing values replicate columns row using neighboring values. data frame ends null values (last columns nulls), extrapolate last value. first value null, loop around pull last replicate perform interpolation last replicate second replicate.","code":""},{"path":[]},{"path":"/reference/clean_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clean Data by Interpolating Missing Values — clean_data","text":"","code":"my_data <- matrix(    c(      1, 60, 1, 2, 3, 4, 5,   # No NA values      1, 90, 9, NA, 4, NA, 2,  # NA Values in row      1, 120, 3, 6, NA, NA, 9  # Consecutive NA values     ),     nrow = 3,     byrow=TRUE  ) cleaned_data <- clean_data(my_data, n_trials = 3, n_replicates = 5) print(my_data) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1   60    1    2    3    4    5 #> [2,]    1   90    9   NA    4   NA    2 #> [3,]    1  120    3    6   NA   NA    9 print(cleaned_data) #>      [,1] [,2] [,3] [,4] [,5]  [,6] [,7] #> [1,]    1   60    1    2  3.0  4.00    5 #> [2,]    1   90    9   11  4.0  6.00    2 #> [3,]    1  120    3    6 10.5 15.75    9"},{"path":"/reference/do_ordering.html","id":null,"dir":"Reference","previous_headings":"","what":"Score and Order Data — do_ordering","title":"Score and Order Data — do_ordering","text":"Score Order Data","code":""},{"path":"/reference/do_ordering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score and Order Data — do_ordering","text":"","code":"do_ordering(   n_trials,   id_list,   df_list,   n_replicates,   verbose = FALSE,   sort = TRUE )"},{"path":"/reference/do_ordering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score and Order Data — do_ordering","text":"n_trials number rows individual sample . id_list list unique individual sample names df_list list data frames per unique individual n_replicates number replicates study. verbose boolean parameter defaults FALSE. Determines whether messages printed. sort boolean parameter defaults TRUE. TRUE, sorts returned data frame score. FALSE, returns data individual order provided ","code":""},{"path":"/reference/do_ordering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score and Order Data — do_ordering","text":"Returns data frame results, following form:","code":"- Column 1: \"individual\" - the unique identifier of an individual or sample      - Column 2: \"n_crossings\" - the calculated number of crossings.      - Column 3: \"max_variance\" - the maximum of the variances of the replicate measurements at a single time for the individual or sample.      - Column 4: \"ave_variance\" - the average of the variances of the replicate measurements at a single time for the individual or sample.      - Column 5: \"base_score\" - the original, unnormalized profile repeatability score. Smaller numbers rank higher.      - Column 6: \"final_score\" - the base score, normalized by the sigmoid function. Constrained to be between 0 and 1. Scores closer to 1 rank higher.      - Column 7: \"rank\" - the calculated ranking of the individual or sample, against all other individuals or samples in the data set."},{"path":"/reference/do_ordering.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score and Order Data — do_ordering","text":"Performs ordering input data scoring individual data frame. main function package, send individuals data scoring. , scores computed, order result data frame score assign rank. Ranks assigned ties allowed - N individuals tie, rank averaged. example, max score 1, two individuals score, rank 1.5","code":""},{"path":"/reference/do_ordering.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score and Order Data — do_ordering","text":"","code":"df <- data.frame(     col_a = c('A', 'A', 'B', 'B'),     col_b = c(5, 15, 5, 15),     col_c = c(5, 10, 1, 2),     col_d = c(10, 15, 3, 4)   ) id_list <- unique(df[, 1]) individuals <- list() for (i in 1:length(id_list)) {   individuals[[i]] <- df[df[, 1] == id_list[i], ] } ret_df <- do_ordering(n_trials=2, id_list=id_list, df_list=individuals, n_replicates=2) print(ret_df) #>   individual n_crossings max_variance ave_variance base_score final_score rank #> 1          B           0          2.0          2.0       4.00      0.9930    1 #> 2          A           0         12.5         12.5      25.02      0.9914    2"},{"path":"/reference/example_two_point_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data: Two Point Data — example_two_point_data","title":"Example Data: Two Point Data — example_two_point_data","text":"example data one perform profile repeatability . Consists 9 individual animals, corticosterone data taken 2 timepoints (n_trials = 2), baseline (time = 3) stress-induced (time = 30). , 28 replicate columns.","code":""},{"path":"/reference/example_two_point_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data: Two Point Data — example_two_point_data","text":"","code":"example_two_point_data"},{"path":[]},{"path":"/reference/example_two_point_data.html","id":"example-two-point-data","dir":"Reference","previous_headings":"","what":"example_two_point_data","title":"Example Data: Two Point Data — example_two_point_data","text":"dataframe 10 rows 30 columns: Animal animal name/unique identifier Time time measurement, days. SD.DR name replicate column.","code":""},{"path":"/reference/example_two_point_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data: Two Point Data — example_two_point_data","text":"data extracted Romero & Rich 2007 (Comp Biochem. Physiol. Part Mol. Integr. Physiol. 147, 562-568. https://doi.org/10.1016/j.cbpa.2007.02.004)","code":""},{"path":"/reference/find_next_good_datapoint.html","id":null,"dir":"Reference","previous_headings":"","what":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"Next Non-Null Data Point?","code":""},{"path":"/reference/find_next_good_datapoint.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"","code":"find_next_good_datapoint(data_row, index, n_replicates)"},{"path":"/reference/find_next_good_datapoint.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"data_row numeric vector representing data row. index index current data point. n_replicates total number replicates (length row)","code":""},{"path":"/reference/find_next_good_datapoint.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"next good data point -999 none found.","code":""},{"path":"/reference/find_next_good_datapoint.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"Given data row, index, number replicates (number elements row), function finds next good data point row. good data point non-missing value (NA) non-empty string.","code":""},{"path":"/reference/find_next_good_datapoint.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"What Is the Next Non-Null Data Point? — find_next_good_datapoint","text":"","code":"data_row <- c(NA, 3, 2, NA, 5) index <- 1 n_replicates <- 5 find_next_good_datapoint(data_row, index, n_replicates) # expect 3 #> [1] 3"},{"path":"/reference/get_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Group Variance — get_vars","title":"Calculate Group Variance — get_vars","text":"Calculate Group Variance","code":""},{"path":"/reference/get_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Group Variance — get_vars","text":"","code":"get_vars(individual_array, n_replicates)"},{"path":"/reference/get_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Group Variance — get_vars","text":"individual_array array data individual n_replicates number replicate groups","code":""},{"path":"/reference/get_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Group Variance — get_vars","text":"list, elements :","code":"1. variances: A vector of the variances of the sample      2. total_sum: The sum of all the measurements in the sample      3. ssq: The sum of all the squares of the measurements in the sample      4. num_measurements: The total number of measurements in the sample that are not null"},{"path":"/reference/get_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Group Variance — get_vars","text":"given individual array, rows times, computes variance values replicates. Returns variances, sum values (times replicates), sum values squared, number values.","code":""},{"path":"/reference/get_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Group Variance — get_vars","text":"","code":"arr <- data.frame(   individual=c(\"a\", \"a\"),   time=c(5, 15),   col_a=c(1, 2),   col_b=c(2, 3) ) variance_return <- get_vars(individual_array=arr, n_replicates=2) print(variance_return) #> $variances #> [1] 0.5 0.5 #>  #> $total_sum #> [1] 8 #>  #> $ssq #> [1] 18 #>  #> $num_measurements #> [1] 4 #>"},{"path":"/reference/profrep.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Profile Repeatability — profrep","title":"Perform Profile Repeatability — profrep","text":"Perform Profile Repeatability","code":""},{"path":"/reference/profrep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Profile Repeatability — profrep","text":"","code":"profrep(df, n_timepoints, sort = TRUE, verbose = FALSE)"},{"path":"/reference/profrep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Profile Repeatability — profrep","text":"df input data frame, minimum shape 3 rows 4 columns. can read csv another data frame stored memory. assumed data frame following structure: Column 1 unique identifier individual animal sample Column 2 time sample Column 3-N columns replicate data. Row 1 assumed header strings column. n_timepoints number rows individual sample . example, replicates collected individual 1 times 15 30, replicates B, data frame look like:   sort boolean parameter defaults TRUE. TRUE, sorts returned data frame score. FALSE, returns data individual order provided. verbose boolean parameter defaults FALSE. Determines whether messages printed.","code":"| id | time | A | B |             |:--:|:----:|:-:|:-:|             | 1  | 15 | 1 | 2 |             | 1  | 30 | 3 | 4 |"},{"path":"/reference/profrep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Profile Repeatability — profrep","text":"Returns data frame results, following form: Column 1: \"individual\" - unique identifier individual sample Column 2: \"n_crossings\" - calculated number crossings. Column 3: \"max_variance\" - maximum variances replicate measurements single time individual sample. Column 4: \"ave_variance\" - average variances replicate measurements single time individual sample. Column 5: \"base_score\" - original, unnormalized profile repeatability score. Smaller numbers rank higher. Column 6: \"final_score\" - base score, normalized sigmoid function. Constrained 0 1. Scores closer 1 rank higher. Column 7: \"rank\" - calculated ranking individual sample, individuals samples data set.","code":""},{"path":"/reference/profrep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform Profile Repeatability — profrep","text":"Calculates profile repeatability measure input data according method Reed et al., 2019, J. Gen. Comp. Endocrinol. (270).","code":""},{"path":[]},{"path":"/reference/profrep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Profile Repeatability — profrep","text":"","code":"test_data <- profrep::example_two_point_data results <- profrep::profrep(df=test_data, n_timepoints=2) print(results) #>   individual n_crossings max_variance ave_variance base_score final_score rank #> 1          6         117        83.64        53.26     187.09      0.9581    1 #> 2          9         150        97.23        57.33     232.34      0.9356    2 #> 3          7         160       151.26        96.69     368.95      0.7876    3 #> 4          1         149       182.41       100.01     428.34      0.6719    4 #> 5          4         180       197.31       113.02     507.64      0.4809    5"},{"path":"/reference/retrieve_good_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","title":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","text":"function retrieves indices non-missing data values specific time point individual array.","code":""},{"path":"/reference/retrieve_good_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","text":"","code":"retrieve_good_data(individual_array, t, n_replicates)"},{"path":"/reference/retrieve_good_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","text":"individual_array data matrix data frame representing individual data, rows correspond time points columns correspond replicates variables. t time point want retrieve non-missing data indices. n_replicates number replicates data matrix.","code":""},{"path":"/reference/retrieve_good_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","text":"numeric vector containing indices non-missing data values specified time point t. non-missing values one non-missing value, NULL returned.","code":""},{"path":[]},{"path":"/reference/retrieve_good_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve Indices of Non-Missing Data for a Specific Time Point — retrieve_good_data","text":"","code":"# Example usage: individual_data <- matrix(c(NA, 2, NA, 4, 5, NA), nrow = 1) retrieve_good_data(individual_data, t = 1, n_replicates = 3) #> [1] 2 3"},{"path":"/reference/score_dfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Profile Repeatability Score — score_dfs","title":"Compute Profile Repeatability Score — score_dfs","text":"Compute Profile Repeatability Score","code":""},{"path":"/reference/score_dfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Profile Repeatability Score — score_dfs","text":"","code":"score_dfs(id_list, df_list, n_replicates, n_trials, verbose = FALSE)"},{"path":"/reference/score_dfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Profile Repeatability Score — score_dfs","text":"id_list list names individuals df_list list data frames, correspond one names individual list n_replicates number replicate columns (number columns df df_list) n_trials number trials per individual (number rows df df_list) verbose boolean parameter defaults FALSE. Determines whether messages printed.","code":""},{"path":"/reference/score_dfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Profile Repeatability Score — score_dfs","text":"dataframe calculated metrics. column structure follows:","code":"- Column 1: \"individual\" - the unique identifier of an individual or sample      - Column 2: \"n_crossings\" - the calculated number of crossings.      - Column 3: \"max_variance\" - the maximum of the variances of the replicate measurements at a single time for the individual or sample.      - Column 4: \"ave_variance\" - the average of the variances of the replicate measurements at a single time for the individual or sample.      - Column 5: \"base_score\" - the original, unnormalized profile repeatability score. Smaller numbers rank higher.      - Column 6: \"final_score\" - the base score, normalized by the sigmoid function. Constrained to be between 0 and 1. Scores closer to 1 rank higher."},{"path":"/reference/score_dfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute Profile Repeatability Score — score_dfs","text":"Works multiple elements data. Splits data data frame particular individual id_list, calculates metrics compute profile repeatability score. Returns data frame individuals name score.","code":""},{"path":"/reference/score_dfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute Profile Repeatability Score — score_dfs","text":"","code":"df <- data.frame(     col_a = c('A', 'A', 'B', 'B'),     col_b = c(5, 15, 5, 15),     col_c = c(5, 10, 1, 2),     col_d = c(10, 15, 3, 4)   ) id_list <- unique(df[, 1]) individuals <- list() for (i in 1:length(id_list)) {   individuals[[i]] <- df[df[, 1] == id_list[i], ] } ret_df <- score_dfs(id_list=id_list, df_list=individuals, n_replicates=2, n_trials=2) print(ret_df) #>   individual n_crossings max_variance ave_variance base_score final_score #> 1          A           0         12.5         12.5      25.02      0.9914 #> 2          B           0          2.0          2.0       4.00      0.9930"},{"path":"/reference/score_individual_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Score an Individual Data Frame — score_individual_df","title":"Score an Individual Data Frame — score_individual_df","text":"Score Individual Data Frame","code":""},{"path":"/reference/score_individual_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Score an Individual Data Frame — score_individual_df","text":"","code":"score_individual_df(   individual_df,   n_trials,   n_replicates,   max_variance,   variance_set )"},{"path":"/reference/score_individual_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Score an Individual Data Frame — score_individual_df","text":"individual_df data frame containing individual data. n_trials total number trials data frame. n_replicates total number replicates trial. max_variance maximum allowed variance value. variance_set vector variance values.","code":""},{"path":"/reference/score_individual_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Score an Individual Data Frame — score_individual_df","text":"list calculated individual data frame. Contains two values: n_crossings: number crossover events data. base_score: un-normalized profile repeatability score data.","code":""},{"path":"/reference/score_individual_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Score an Individual Data Frame — score_individual_df","text":"function calculates score individual data frame based various factors, including number crossovers, maximum variance, set variances. score computed follows: factors number crossovers using scaling factor. considers maximum variance value variance set. adds component based average variance values. includes scaled component number crossovers.","code":""},{"path":[]},{"path":"/reference/score_individual_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Score an Individual Data Frame — score_individual_df","text":"","code":"arr <- data.frame(   individual=c(\"a\", \"a\"),   time=c(5, 15),   col_a=c(1, 2),   col_b=c(2, 3) ) variance_set <- c(0.5, 0.5) max_variance <- 0.5 score_list <- score_individual_df(   individual_df=arr,   n_trials=2,   n_replicates=2,   max_variance=max_variance,   variance_set=variance_set ) print(score_list) #> $n_crossings #> [1] 0 #>  #> $base_score #> [1] 1.001 #>"},{"path":"/reference/sigmoid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the sigmoid function of the input — sigmoid","title":"Calculates the sigmoid function of the input — sigmoid","text":"Calculates sigmoid function input","code":""},{"path":"/reference/sigmoid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the sigmoid function of the input — sigmoid","text":"","code":"sigmoid(float)"},{"path":"/reference/sigmoid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the sigmoid function of the input — sigmoid","text":"float float number","code":""},{"path":"/reference/sigmoid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the sigmoid function of the input — sigmoid","text":"float number result sigmoid function","code":""},{"path":"/reference/sigmoid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculates the sigmoid function of the input — sigmoid","text":"","code":"sigmoid(0) #> [1] 0.5 sigmoid(2) #> [1] 0.8807971"},{"path":"/reference/sparrow_repeatability_three_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data: Sparrow Repeatability (3 Point Data) — sparrow_repeatability_three_point","title":"Example Data: Sparrow Repeatability (3 Point Data) — sparrow_repeatability_three_point","text":"example data one perform profile repeatability . Consists 12 individual animals, corticosterone data taken 3 times (n_trials = 3), baseline (time = 0) two stress-induced (time = 15 30). , 10 replicate columns. example also shows happens null data records individuals.","code":""},{"path":"/reference/sparrow_repeatability_three_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data: Sparrow Repeatability (3 Point Data) — sparrow_repeatability_three_point","text":"","code":"sparrow_repeatability_three_point"},{"path":[]},{"path":"/reference/sparrow_repeatability_three_point.html","id":"sparrow-repeatability-three-point","dir":"Reference","previous_headings":"","what":"sparrow_repeatability_three_point","title":"Example Data: Sparrow Repeatability (3 Point Data) — sparrow_repeatability_three_point","text":"dataframe 36 rows 12 columns: Animal animal name/unique identifier TIME time measurement, days LD.500 name replicate column","code":""},{"path":"/reference/sparrow_repeatability_three_point.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data: Sparrow Repeatability (3 Point Data) — sparrow_repeatability_three_point","text":"data extracted Rich & Romero 2001 (J. Comp. Physiol. Part B Biochem. Syst. Environ. Physiol. 171, 543-647. https://doi.org/10.1007/s003600100204)","code":""},{"path":"/reference/synthetic_data_four_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data: Synthetic 4-Point Data — synthetic_data_four_point","title":"Example Data: Synthetic 4-Point Data — synthetic_data_four_point","text":"example data one perform profile repeatability . data synthetic data created testing purposes designed span range perceived repeatability scores. Consists 11 individual animals, data taken 4 times (n_trials = 4), baseline (time = 0) three stress-induced (time = 15, 30, 45). , four replicate columns. Replicate column names refer sample tests performed animal.","code":""},{"path":"/reference/synthetic_data_four_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data: Synthetic 4-Point Data — synthetic_data_four_point","text":"","code":"synthetic_data_four_point"},{"path":[]},{"path":"/reference/synthetic_data_four_point.html","id":"synthetic-data-four-point","dir":"Reference","previous_headings":"","what":"synthetic_data_four_point","title":"Example Data: Synthetic 4-Point Data — synthetic_data_four_point","text":"dataframe 44 rows 6 columns: Animal animal name/unique identifier TIME time measurement (unit important) (unimportant) name replicate column. B (unimportant) name replicate column. C (unimportant) name replicate column. D (unimportant) name replicate column.","code":""},{"path":"/reference/synthetic_data_four_point.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example Data: Synthetic 4-Point Data — synthetic_data_four_point","text":"Data created testing purposes Reed et al., 2019 (Gen. Comp. Endocrinol. 270, 1-9. https://doi.org/10.1016/j.ygcen.2018.09.015)","code":""},{"path":"/news/index.html","id":"profrep-100","dir":"Changelog","previous_headings":"","what":"profrep 1.0.0","title":"profrep 1.0.0","text":"CRAN release: 2023-12-04","code":""},{"path":"/news/index.html","id":"profrep-100-1","dir":"Changelog","previous_headings":"","what":"profrep 1.0.0","title":"profrep 1.0.0","text":"CRAN release: 2023-12-04 Initial CRAN submission.","code":""}]
